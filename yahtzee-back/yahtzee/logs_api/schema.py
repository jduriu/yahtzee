from pydantic import BaseModel, ConfigDict, Field
from pydantic.functional_validators import BeforeValidator
from typing import List, Optional
from typing_extensions import Annotated
from bson import ObjectId
from enum import Enum

PyObjectId = Annotated[str, BeforeValidator(str)]


class LogType(str, Enum):
    """
    Document schema for a log instance.
      id: string identifier generated by MongoDB
      log_time: a python epoch time stamp for when the log is entered
      type: string enum from LogType class
    """
    score = 'score'
    roll = 'roll'
    turn = 'turn'


class Log(BaseModel):
    """
    Document schema for a log instance.
      id: string identifier generated by MongoDB
      log_time: a python unix time stamp for when the log is entered
      type: string enum from LogType class
    """
    id: Optional[PyObjectId] = Field(alias="_id", default=None)
    log_time: float = Field(...)
    type: LogType


class LogHistory(BaseModel):
    """
    Document schema for a log history instance in the database.
      id: string identifier generated by MongoDB
      scorecard_id: string identifier for the scorecard instance associated with the log history
      logs: an array of logs associated with the scorecard id
    """
    id: Optional[PyObjectId] = Field(alias="_id", default=None)
    logs: [Log] = Field(...)
    model_config = ConfigDict(
        json_encoders={ObjectId: str}
    )
